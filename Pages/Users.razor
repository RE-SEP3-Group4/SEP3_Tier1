@page "/users"
@using Data
@using Models
@using Authentication
@if (user.securityLevel > 1) {
        <h3>Users</h3>
        <h4>
            Search by id <input @oninput="@((arg) => FilterById(arg))" style="width: 50px" />
            by username <input @oninput="@((arg) => FilterByUsername(arg))" style="width: 100px" />
            by password<input @oninput="@((arg) => FilterByPassword(arg))" style="width: 100px" />
        </h4>
        <div>
            @if (users == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!users.Any())
            {
                <p>
                    <em>No users in the system. Please add some.</em>
                </p>
            }
            else
            {
                <table class="table">
                    <thead>

                        <tr>
                            <th>User Id</th>
                            <th>Username</th>
                            <th>Password</th>
                            <th>securityLevel</th>
                            <th>Edit</th>
                            <th>Remove</th>

                        </tr>

                    </thead>
                    @foreach (var user in toShow)
                    {
                        <tbody>

                            <tr>
                                <td>@user.id</td>
                                <td>@user.username</td>
                                <td>@user.password</td>
                                <td>@user.securityLevel</td>

                                <td>
                                    <button class="btn btn-primary"
                                            @onclick="(() => EditUser(user.id))">
                                        EditUser
                                    </button>
                                </td>
                                <td>
                                    <button @onclick="@((() => RemoveUser(user.id)))">
                                        <i class="oi oi-trash" style="color: black" />
                                    </button>
                                </td>

                            </tr>

                        </tbody>
                    }
                </table>
            }
        </div>

        @if (popUp)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Edit User</h3>
                            <button type="button" class="close" @onclick="ClosePopUp">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <input  class="form-control" type="text" placeholder="id" @bind="user.id"/>
                            <input class="form-control" type="text" placeholder="Username" @bind="user.username" />
                            <input class="form-control" type="password" placeholder="Password" @bind="user.password" />
                            <button class="btn btn-primary" @onclick="SaveUser"> Save</button>

                        </div>
                    </div>

                </div>

            </div>
        }
}
@if(user.securityLevel <= 1) {
<p>Ups... Nothing to see here</p>
}
@code {
    private User user = UserService.getInstance().GetUser();
    private bool popUp = false;
    private List<User> users;
    private List<User> toShow;
    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.GetAllUsers();
        toShow = users;
    }
    private async Task EditUser(int userId)
    {

        userId= user.id;
        popUp = true;

    }
    private async Task SaveUser()
    {
        try
        {
            if (user.id != null)
            {
                var _user = user;
                _user.id = user.id;
                _user.username = user.username;
                _user.password = user.password;
                await UserManager.UpdateUser(user.id, user.username, user.password);
            }
            popUp = false;
            users = await UserManager.GetAllUsers();
        }
        catch (Exception ex)
        {
            String error;
            error = ex.GetBaseException().Message;
        }
    }
    private async Task RemoveUser(int userId)
    {
        await UserManager.DeleteUser(userId);
    }
    void openPopUp()
    {
        popUp = true;
    }

    void ClosePopUp()
    {
        popUp = false;
    }
    private void FilterById(ChangeEventArgs args)
    {
        int? filterById = null;
        try
        {
            filterById = int.Parse(args.Value.ToString());
        }
        catch (Exception e) { }
        if (filterById != null)
        {
            toShow = users.Where(t => t.id == filterById).ToList();
        }
        else
        {
            toShow = users;
        }
    }
    private void FilterByUsername(ChangeEventArgs args)
    {
        string filterByUsername = null;
        try
        {
            filterByUsername = args.Value.ToString();
        }
        catch (Exception e) { }
        if (filterByUsername != null)
        {
            toShow = users.Where(t => t.username.Contains(filterByUsername)).ToList();
        }
        else
        {
            toShow = users;
        }
    }
    private void FilterByPassword(ChangeEventArgs args)
    {
        string filterByPassword = null;
        try
        {
            filterByPassword = args.Value.ToString();
        }
        catch (Exception e) { }
        if (filterByPassword != null)
        {
            toShow = users.Where(t => t.password.Contains(filterByPassword)).ToList();
        }
        else
        {
            toShow = users;
        }
    }
}