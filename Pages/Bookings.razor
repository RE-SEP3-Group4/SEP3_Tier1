@page "/bookings"
@using Models
@using Authentication
@using Data
 <style >
    #btn-class {
        display: block;
        margin: auto;
    }
    #table_res{
        margin-left:-20px;
    }
    #search{
        margin-top: 25px;
    }
</style>
<h3>Welcome to your reservations!</h3>
<h5>In this page you will be able to see and manage your reservations.<br /> In order to so first you will need to make a suscription to the gym. If you haven't done it please follow this <a href="payments">link</a></h5>
@if (payments != null)
{
    <button class="btn btn-primary" @onclick="openPopUp">Create</button>
}

<div class="card mt-2">
    <h4 class="card-header">
        Bookings of @user.username   search by date <input @oninput="@((arg) => FilterByDate(arg))" style="width: 100px" />
       by hour <input @oninput="@((arg) => FilterByHour(arg))" style="width: 100px" />
    </h4>
 
    
        <div class="card-body">

            @if (loading)
            {
                <div class="spinner-border spinner-border-sm"></div>
            }
            @if (reservations != null)
            {
                <ul>
                    <table id="table_res" class="table table-bordered table-striped">
                        @foreach (var reservation in toShow)
                        {
                            <tr>
                                <td class="table-info">Date of reservation: @reservation.date.Insert(2, "/").Insert(5, "/")</td>

                                <td class="table-info">Time of reservation: @reservation.hour.Insert(2, ":")</td>

                                <td class="table-danger">

                                    <button id="btn-class" class="btn btn-danger" @onclick="() => DeleteBooking(reservation)">Delete</button>
                                </td>
                            </tr>
                        }
                    </table>
                </ul>
            }
        </div>
</div>
@if (popUp)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Create payment</h3>
                    <button type="button" class="close" @onclick="ClosePopUp">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="reservation">
                        <div class="form-group">
                            <label for="Name" class="control-label">Reservation for @user.username with id @user.id</label>
                            <InputDate type="date" class="form-control" @bind-Value="dateTime" />
                            <input type="time" class="form-control oi-timer" @bind-value="hourTime" />
                        </div>
                        <div class="form-group">
                            <button type="button" class="btn btn-primary" @onclick="() => { CreateBooking(); ClosePopUp(); }">Save</button>
                            <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>

        </div>

    </div>
}

@code {
    private User user;
    private bool loading, popUp = false;
    private DateTime dateTime, hourTime;
    private string date, hour;
    private Reservation reservation = new Reservation();
    private List<Payment> payments;

    private List<Reservation> reservations;
    private List<Reservation> toShow;
    protected override async Task OnInitializedAsync()
    {
        user = UserService.getInstance().GetUser();
        loading = true;
        reservations = await ReservationManager.GetReservations(user.id);
        payments = await PaymentManager.GetPayments(user.id);
        toShow = reservations;
        loading = false;

    }

    private async void CreateBooking()
    {
        date = dateTime.ToString("ddMMyyyy");
        hour = hourTime.ToString("HHmm");
        await ReservationManager.CreateReservation(user.id, date, hour);
    }
    private async void  openPopUp()
    {
        payments = await PaymentManager.GetPayments(user.id);
        if (payments != null) {
            popUp = true;
        }

    }
    private void ClosePopUp()
    {

        popUp = false;
    }
    void cancel()
    {

        popUp = false;
    }
    private async void DeleteBooking(Reservation reservation)
    {

        await ReservationManager.DeleteReservation(reservation);
        reservations.Remove(reservation);
        reservations = await ReservationManager.GetReservations(user.id);
    }
    
    private void FilterByDate(ChangeEventArgs args)
    {
        string filterByDate = null;
        try
        {
            filterByDate = args.Value.ToString();
        }
        catch (Exception e) { }
        if (filterByDate != null)
        {
            toShow = reservations.Where(t => t.date.Contains(filterByDate)).ToList();
        }
        else
        {
            toShow = reservations;
        }
    }
    private void FilterByHour(ChangeEventArgs args)
    {
        string filterByHour = null;
        try
        {
            filterByHour = args.Value.ToString();
        }
        catch (Exception e) { }
        if (filterByHour != null)
        {
            toShow = reservations.Where(t => t.hour.Contains(filterByHour)).ToList();
        }
        else
        {
            toShow = reservations;
        }
    }

}