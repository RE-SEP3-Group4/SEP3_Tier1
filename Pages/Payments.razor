@page "/payments"
@using Data
@using Models
@using Authentication
<style>
    #btn-class{
        display:block;
        margin:auto;
    }
    #table_res {
        margin-left: -20px;
    }
</style>
<h3>Welcome to your payments!</h3>
<h5>Here you can create a payment so that you can start making reservations!</h5>
<button class="btn btn-primary" @onclick="openPopUp">Create</button>
<div class="card mt-4">
    <h4 class="card-header">Payments</h4>
    <div class="card-body">

        @if (loading)
        {
            <div class="spinner-border spinner-border-sm"></div>
        }
        @if (payments != null)
        {
            <ul>
                <table id="table_res" class="table table-bordered table-striped">
                    @foreach (var _payment in payments)
                    {
                    <tbody>
                        <tr>
                            <td class="table-info">Your subscription starts: @_payment.startDate.Insert(2, "/").Insert(5, "/")</td>
                            <td class="table-info">Your subscription will end: @_payment.endDate.Insert(2, "/").Insert(5, "/")</td>
                            <td class="table-danger">
                                
                                <button id="btn-class" class="btn btn-danger" @onclick="() => DeletePayment(_payment)">Delete</button>
                            </td>
                            <td><button id="btn-class" class="btn btn-primary" @onclick="() => Refresh(_payment)">Refresh</button></td>
                        </tr>
                    </tbody>
                    }
                </table>
            </ul>
        }
    </div>
</div>
@if (popUp)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Create payment</h3>
                    <button type="button" class="close" @onclick="ClosePopUp">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="payment">
                        <InputDate type="date" class="form-control" @bind-Value="startDateTime" />
                        <InputDate type="date" class="form-control" @bind-Value="endDateTime" />
                        <button class="btn btn-primary" @onclick="CreatePayment"> Save</button>
                        <p>@changeStartDateToString()</p>
                    </EditForm>
                </div>
            </div>

        </div>

    </div>
}

@code {
    private User user;
    private Payment payment = new Payment();
    private bool loading = false;
    private bool popUp = false;
    private List<Payment> payments;
    private DateTime startDateTime, endDateTime;
    private string startDate, endDate;

    private void Refresh(Payment payment)
    {
        if (payment.endDate == DateTime.Now.ToString("ddMMyyyy"))
        {
            payments.Remove(payment);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        user = UserService.getInstance().GetUser();
        loading = true;
        payments = await PaymentManager.GetPayments(user.id);
        loading = false;




    }
    private async Task CreatePayment()
    {
        await PaymentManager.CreatePayment(UserService.getInstance().GetUser().id, changeStartDateToString(), changeEndDateToString());
    }
    string changeStartDateToString()
    {
        startDate = startDateTime.ToString("ddMMyyyy");
        return startDate;
    }
    string changeEndDateToString()
    {
        endDate = endDateTime.ToString("ddMMyyyy");
        return endDate;
    }

    void openPopUp()
    {

        popUp = true;

    }
    private void ClosePopUp()
    {
        popUp = false;
    }
    private async Task DeletePayment(Payment payment)
    {
        await PaymentManager.DeletePayment(payment);
    }
}
